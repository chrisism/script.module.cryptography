# Azure Devops Pipeline definition
# 
# Needed variables (var groups in library)
# - repository.variables
#   - git_emailAddress 
#   - git_userName
#   - github_token
trigger:
- main
- release/*
- hotfix/*
- dev

pool:
  vmImage: 'ubuntu-latest'

variables:
  isMaster: or(${{eq(variables['Build.SourceBranch'], 'refs/heads/master-fork')}},${{eq(variables['Build.SourceBranch'], 'refs/heads/main')}})
  isReleaseCandidate: ${{startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')}}
  isHotfix: ${{startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')}}
  isDev: ${{eq(variables['Build.SourceBranch'], 'refs/heads/dev')}}
  workingDirectory: '$(Build.SourcesDirectory)'
  addonName: script.module.cryptography

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: build
      displayName: build
      workspace:
        clean: all 
        
      steps:
      - checkout: self
        submodules: true

      - task: gitversion/setup@0
        displayName: 'Install GitTools'
        inputs:
          versionSpec: '5.x'

      - task: gitversion/execute@0
        displayName: 'Executing gitversion'

      - script: |
            echo '##vso[task.setvariable variable=addonVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)~$(GitVersion.PreReleaseLabel)$(GitVersion.PreReleaseNumber)
            echo '##vso[task.setvariable variable=tagVersion]$(GitVersion.LegacySemVer)
        displayName: 'Setting version variables'
        condition: not(eq(${{variables.isMaster}}, true))
        
      - script: |
            echo '##vso[task.setvariable variable=addonVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)
            echo '##vso[task.setvariable variable=tagVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)
        displayName: 'Setting version variables'
        condition: eq(${{variables.isMaster}}, true)

      - task: UsePythonVersion@0
        displayName: 'Use Python 3.x'

      - task: PipAuthenticate@0
        displayName: Authenticate with artifact feed
        inputs:
          artifactFeeds: AKL/akl_libs

      - bash: |
          pip install -r requirements.txt
        displayName: pip install 

      - bash: update_addon_news $(workingDirectory)/addon.xml $(workingDirectory)/changelog.md
        displayName: 'Add changelog in addon.xml'
        workingDirectory: '$(workingDirectory)'

      - task: RegExMatchReplace@2
        displayName: 'Set addon version'
        inputs:
          PathToFile: 'addon.xml'
          RegEx: 'version="\d+\.\d+\.\d+.*" provider'
          ValueToReplace: 'version="$(addonVersion)" provider'

      - template: build_package_steps.yml
        parameters:
          packageType: 'all'

      - template: build_package_steps.yml
        parameters:
          packageType: 'android'

- stage: DeployStaging
  displayName: Deployment on Staging
  condition: and(succeeded(), or(eq(${{variables.isReleaseCandidate}}, true),eq(${{variables.isHotfix}}, true),eq(${{variables.isMaster}}, true)))
  jobs:
    - deployment: Staging
      environment: 
        name: Staging

      variables:
        - group: repository.variables
        - name: repository_url
          value: github.com/chrisism/repository.chrisism.dev.git
        - name: repository_name
          value: repository.chrisism.dev
        - name: repository_data_dir
          value: 'matrix'
        - name: branch_name
          value: main

      strategy:     
        runOnce:
          deploy:
            steps:
              - template: publish_in_repository_steps.yml

# - stage: DeployProd
#   displayName: Deployment on Production
#   condition: and(succeeded(), eq(${{variables.isMaster}}, true))
#   jobs:
#     - deployment: Production
#       environment: 
#         name: Production

#       variables:
#         - group: repository.variables
#         - name: repository_url
#           value: github.com/chrisism/repository.chrisism.git
#         - name: repository_name
#           value: repository.chrisism
#         - name: repository_data_dir
#           value: 'matrix'
#         - name: branch_name
#           value: master

#       strategy:     
#         runOnce:
#           deploy:
#             steps:
#             - template: publish_in_repository_steps.yml